using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–∞—Å–∞–Ω–∏–π.
/// –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å–∞–Ω–∏—è—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
/// </summary>
public class TouchDebugger : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    public TouchProcessor touchProcessor;
    public bool showDetailedLogs = true;
    public bool showOnScreenInfo = true;

    private int totalTouchesCount = 0;

    void Start()
    {
        if (touchProcessor == null)
        {
            Debug.LogError("TouchProcessor –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ TouchDebugger!", this);
            enabled = false;
            return;
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–∞—Å–∞–Ω–∏–π
        touchProcessor.OnTouchBegan += OnTouchBegan;
        touchProcessor.OnTouchMoved += OnTouchMoved;
        touchProcessor.OnTouchEnded += OnTouchEnded;

        Debug.Log("üîç TouchDebugger –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ª–∞–¥–∫–µ –∫–∞—Å–∞–Ω–∏–π.");
    }

    void OnDestroy()
    {
        if (touchProcessor != null)
        {
            touchProcessor.OnTouchBegan -= OnTouchBegan;
            touchProcessor.OnTouchMoved -= OnTouchMoved;
            touchProcessor.OnTouchEnded -= OnTouchEnded;
        }
    }

    private void OnTouchBegan(TouchInfo touch)
    {
        totalTouchesCount++;

        if (showDetailedLogs)
        {
            Debug.Log($"üü¢ <color=green><b>–ö–ê–°–ê–ù–ò–ï –ù–ê–ß–ê–õ–û–°–¨</b></color>\n" +
                     $"   ID: {touch.TouchId}\n" +
                     $"   –ü–æ–∑–∏—Ü–∏—è –≤ –∫–∞–º–µ—Ä–µ: ({touch.PositionInCamera.x:F1}, {touch.PositionInCamera.y:F1})\n" +
                     $"   –ü–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ü–∏–∏: ({touch.PositionInProjection.x:F3}, {touch.PositionInProjection.y:F3})\n" +
                     $"   –ü–∏–∫—Å–µ–ª–µ–π: {touch.PixelCount}\n" +
                     $"   –í—Ä–µ–º—è: {touch.StartTime:F2}");
        }
    }

    private void OnTouchMoved(TouchInfo touch)
    {
        if (showDetailedLogs)
        {
            Debug.Log($"üü° <color=yellow>–ö–ê–°–ê–ù–ò–ï –î–í–ò–ñ–ï–¢–°–Ø</color>\n" +
                     $"   ID: {touch.TouchId}\n" +
                     $"   –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ({touch.PositionInProjection.x:F3}, {touch.PositionInProjection.y:F3})\n" +
                     $"   –°–º–µ—â–µ–Ω–∏–µ: {touch.DeltaPosition.magnitude:F2} –ø–∏–∫—Å–µ–ª–µ–π\n" +
                     $"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ({touch.DeltaPosition.x:F1}, {touch.DeltaPosition.y:F1})");
        }
    }

    private void OnTouchEnded(TouchInfo touch)
    {
        if (showDetailedLogs)
        {
            Debug.Log($"üî¥ <color=red><b>–ö–ê–°–ê–ù–ò–ï –ó–ê–ö–û–ù–ß–ò–õ–û–°–¨</b></color>\n" +
                     $"   ID: {touch.TouchId}\n" +
                     $"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {touch.Duration:F2} —Å–µ–∫—É–Ω–¥\n" +
                     $"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ({touch.PositionInProjection.x:F3}, {touch.PositionInProjection.y:F3})");
        }
    }

    void Update()
    {
        // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        if (Time.frameCount % 60 == 0) // –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ 60 FPS
        {
            Debug.Log($"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Å–∞–Ω–∏–π: {touchProcessor.ActiveTouches.Count}, –í—Å–µ–≥–æ –∫–∞—Å–∞–Ω–∏–π: {totalTouchesCount}");
        }
    }

    void OnGUI()
    {
        if (!showOnScreenInfo) return;

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        GUI.color = Color.white;
        GUILayout.BeginArea(new Rect(10, 10, 400, 300));

        GUIStyle headerStyle = new GUIStyle(GUI.skin.label);
        headerStyle.fontSize = 16;
        headerStyle.fontStyle = FontStyle.Bold;

        GUILayout.Label("üîç –û–¢–õ–ê–î–ö–ê –°–ò–°–¢–ï–ú–´ –ö–ê–°–ê–ù–ò–ô", headerStyle);
        GUILayout.Space(10);

        GUILayout.Label($"–í—Å–µ–≥–æ –∫–∞—Å–∞–Ω–∏–π: {totalTouchesCount}");
        GUILayout.Label($"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Å–∞–Ω–∏–π: {touchProcessor.ActiveTouches.Count}");
        GUILayout.Label($"–¢–æ—á–µ–∫ –∫–∞—Å–∞–Ω–∏—è: {touchProcessor.TouchPoints.Count}");

        if (touchProcessor.depthData != null)
        {
            GUILayout.Label($"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã: {touchProcessor.depthWidth}x{touchProcessor.depthHeight}");
        }

        GUILayout.Space(10);

        if (touchProcessor.ActiveTouches.Count > 0)
        {
            GUILayout.Label("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è:", headerStyle);
            foreach (var touch in touchProcessor.ActiveTouches)
            {
                string stateColor = touch.State == TouchState.Began ? "green" :
                                   touch.State == TouchState.Moved ? "yellow" : "white";

                GUILayout.Label($"<color={stateColor}>ID {touch.TouchId}: {touch.State} " +
                               $"({touch.PositionInProjection.x:F2}, {touch.PositionInProjection.y:F2}) " +
                               $"[{touch.PixelCount}px, {touch.Duration:F1}s]</color>");
            }
        }

        GUILayout.EndArea();
    }
}
